<!DOCTYPE html>
<html class="">
  <head>
    <meta charset="utf-8">
    <title>Web Apps for Bots</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta property="description" content="Telegram bots can completely replace any website. They support seamless authorization, integrated payments via 15 payment…">
    <meta property="og:title" content="Web Apps for Bots">
    <meta property="og:image" content="https://core.telegram.org/file/464001702/1194c/mBQhTbIWqw8.451557/08727d5d763e24d750">
    <meta property="og:description" content="Telegram bots can completely replace any website. They support seamless authorization, integrated payments via 15 payment…">
    <link rel="icon" type="image/svg+xml" href="https://core.telegram.org/img/website_icon.svg?4">
<link rel="apple-touch-icon" sizes="180x180" href="https://core.telegram.org/img/apple-touch-icon.png">
<link rel="icon" type="image/png" sizes="32x32" href="https://core.telegram.org/img/favicon-32x32.png">
<link rel="icon" type="image/png" sizes="16x16" href="https://core.telegram.org/img/favicon-16x16.png">
<link rel="alternate icon" href="https://core.telegram.org/img/favicon.ico" type="image/x-icon" />
    <link href="https://core.telegram.org/css/bootstrap.min.css?3" rel="stylesheet">
    
    <link href="https://core.telegram.org/css/telegram.css?231" rel="stylesheet" media="screen">
    <style>
    </style>
  </head>
  <body class="preload">
    <div class="dev_page_wrap">
      <div class="dev_page_head navbar navbar-static-top navbar-tg">
        <div class="navbar-inner">
          <div class="container clearfix">
            <ul class="nav navbar-nav navbar-right hidden-xs"><li class="navbar-twitter"><a href="https://twitter.com/telegram" target="_blank" data-track="Follow/Twitter" onclick="trackDlClick(this, event)"><i class="icon icon-twitter"></i><span> Twitter</span></a></li></ul>
            <ul class="nav navbar-nav">
              <li><a href="https://telegram.org/">Home</a></li>
<li class="hidden-xs"><a href="https://telegram.org/faq">FAQ</a></li>
<li class="hidden-xs"><a href="https://telegram.org/apps">Apps</a></li>
<li class=""><a href="https://core.telegram.org/api">API</a></li>
<li class=""><a href="https://core.telegram.org/mtproto">Protocol</a></li>
<li class=""><a href="https://core.telegram.org/schema">Schema</a></li>
            </ul>
          </div>
        </div>
      </div>
      <div class="container clearfix">
        <div class="dev_page">
          <div id="dev_page_content_wrap" class=" ">
  <div class="dev_page_bread_crumbs"></div>
  <h1 id="dev_page_title">Web Apps for Bots</h1>
  
  <div id="dev_page_content"><!-- scroll_nav -->

<p>Telegram bots can completely replace <strong>any website</strong>. They support <a href="https://telegram.org/blog/privacy-discussions-web-bots#meet-seamless-web-bots">seamless authorization</a>, <a href="payments">integrated payments</a> via <strong>15</strong> payment providers (with <em>Google Pay</em> and <em>Apple Pay</em> out of the box), delivering tailored push notifications to users, and <a href="https://core.telegram.org/bots">much more</a>.</p>
<p>With <strong>Web Apps</strong>, bots get a whole new dimension. Bot developers can create <strong>infinitely flexible interfaces</strong> with <em>JavaScript</em>, the most widely used programming language in the world.</p>
<div class="blog_video_player_wrap" style="max-width: 600px; margin: 20px auto 20px;">
 <video class="blog_video_player tl_blog_vid_autoplay" onclick="videoTogglePlay(this)" autoplay loop controls muted poster="https://core.telegram.org/file/464001434/100bf/eWprjdgzEbE.100386/644bbea83084f44c8f" style="max-width: 600px;" title="console.log('Vive la révolution')" alt="Bot Revolution">
  <source src="https://core.telegram.org/file/464001679/11aa9/KQx_BlPVXRo.4922145.mp4/c65433c8ac11a347a8" type="video/mp4">
 </video>
</div>

<blockquote>
<p>To see a <strong>Web App</strong> in action, try our sample <a href="https://t.me/durgerkingbot">@DurgerKingBot</a>.</p>
</blockquote>
<hr>
<h3><a class="anchor" name="recent-changes" href="webapps#recent-changes"><i class="anchor-icon"></i></a>Recent changes</h3>
<h4><a class="anchor" name="june-20-2022" href="webapps#june-20-2022"><i class="anchor-icon"></i></a>June 20, 2022</h4>
<p><strong>Bot API 6.1</strong></p>
<ul>
<li>Added the ability to use bots added to the attachment menu in group, supergroup and channel chats.</li>
<li>Added support for <a href="webapps#adding-bots-to-the-attachment-menu">t.me links</a> that can be used to select the chat in which the attachment menu with the bot will be opened.</li>
<li>Added the fields <em>version</em>, <em>headerColor</em>, <em>backgroundColor</em>, <em>BackButton</em>, <em>HapticFeedback</em> and the methods <em>isVersionAtLeast</em>, <em>setHeaderColor</em>, <em>setBackgroundColor</em>, <em>openLink</em>, <em>openTelegramLink</em>, <em>openInvoice</em> to the class <a href="webapps#initializing-web-apps">WebApp</a>.</li>
<li>Added the field <em>secondary_bg_color</em> to the class <a href="webapps#themeparams">ThemeParams</a>.</li>
<li>Added the method <em>offClick</em> to the class <a href="webapps#mainbutton">MainButton</a>.</li>
<li>Added the fields <em>chat</em>, <em>can_send_after</em> to the class <a href="webapps#webappinitdata">WebAppInitData</a>.</li>
<li>Added the <a href="webapps#events-available-for-web-apps">events</a> <em>backButtonClicked</em>, <em>settingsButtonClicked</em>, <em>invoiceClosed</em>.</li>
</ul>
<hr>
<h3><a class="anchor" name="designing-web-apps" href="webapps#designing-web-apps"><i class="anchor-icon"></i></a>Designing Web Apps</h3>
<h4><a class="anchor" name="color-schemes" href="webapps#color-schemes"><i class="anchor-icon"></i></a>Color Schemes</h4>
<p>Web Apps always receive data about the user&#39;s current <strong>color theme</strong> in real time, so you can adjust the appearance of your interfaces to match it. For example, when users switch between <strong>Day and Night</strong> modes or use various <a href="https://telegram.org/blog/protected-content-delete-by-date-and-more#global-chat-themes-on-android">custom themes</a>.</p>
<div class="blog_video_player_wrap" style="max-width: 600px; margin: 20px auto 20px;">
 <video class="blog_video_player tl_blog_vid_autoplay" onclick="videoTogglePlay(this)" autoplay loop controls muted poster="https://core.telegram.org/file/464001576/10249/wikoQUNnrH4.112118/7b6c8d3366ada2615b" style="max-width: 600px;" title="" alt="Switching Colors">
  <source src="https://core.telegram.org/file/464001257/12087/QNQUbIi864k.909800.mp4/8ea7adad7db407388e" type="video/mp4">
 </video>
</div>

<blockquote>
<p><a href="webapps#themeparams">Jump to technical information</a></p>
</blockquote>
<h4><a class="anchor" name="design-guidelines" href="webapps#design-guidelines"><i class="anchor-icon"></i></a>Design Guidelines</h4>
<p>Telegram apps are known for being snappy, smooth and following a consistent cross-platform design. Your Web App should ideally reflect these principles.</p>
<ul>
<li>All elements should be responsive and designed with a mobile-first approach.</li>
<li>Interactive elements should mimic the style, behavior and intent of UI components that already exist.</li>
<li>All included animations should be smooth, ideally 60fps.</li>
<li>All inputs and images should contain labels for accessibility purposes.</li>
<li>The app should deliver a seamless experience by monitoring the <a href="webapps#color-schemes">dynamic theme-based colors</a> provided by the API and using them accordingly.</li>
</ul>
<hr>
<h3><a class="anchor" name="implementing-web-apps" href="webapps#implementing-web-apps"><i class="anchor-icon"></i></a>Implementing Web Apps</h3>
<p>Telegram currently supports four different ways of launching Web Apps: from a <a href="webapps#keyboard-button-web-apps">keyboard button</a>, from an <a href="webapps#inline-button-web-apps">inline button</a>, from the <a href="webapps#launching-web-apps-from-the-menu-button">bot menu button</a> – and even from the <a href="webapps#launching-web-apps-from-the-attachment-menu">attachment menu</a>.</p>
<div class="blog_image_wrap blog_medium_image_wrap">
  <a href="https://core.telegram.org/file/464001702/1194c/mBQhTbIWqw8.451557/08727d5d763e24d750" target="_blank"><img src="https://core.telegram.org/file/464001702/1194c/mBQhTbIWqw8.451557/08727d5d763e24d750" title="" alt="Types of buttons" srcset="https://core.telegram.org/file/464001702/1194c/mBQhTbIWqw8.451557/08727d5d763e24d750 , 2x" /></a>
</div>

<h4><a class="anchor" name="keyboard-button-web-apps" href="webapps#keyboard-button-web-apps"><i class="anchor-icon"></i></a>Keyboard Button Web Apps</h4>
<blockquote>
<p><strong>TL;DR:</strong> Web Apps launched from a <strong>web_app</strong> type <a href="api#keyboardbutton">keyboard button</a> can send data back to the bot in a <em>service message</em> using <a href="webapps#initializing-web-apps">Telegram.WebApp.sendData</a>. This makes it possible for the bot to produce a response without communicating with any external servers.</p>
</blockquote>
<p>Users can interact with bots using <a href="https://core.telegram.org/bots#keyboards">custom keyboards</a>, <a href="https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating">buttons under bot messages</a>, as well as by sending freeform <strong>text messages</strong> or any of the <strong>attachment types</strong> supported by Telegram: photos and videos, files, locations, contacts and polls. For even more flexibility, bots can utilize the full power of <strong>HTML5</strong> to create user-friendly input interfaces.</p>
<p>You can send a <strong>web_app</strong> type <a href="api#keyboardbutton">KeyboardButton</a> that opens a Web App from the specified URL.</p>
<p>To transmit data from the user back to the bot, the Web App can call the <a href="webapps#initializing-web-apps">Telegram.WebApp.sendData</a> method. Data will be transmitted to the bot as a String in a service message. The bot can continue communicating with the user after receiving it.</p>
<p><strong>Good for:</strong></p>
<ul>
<li><strong>Сustom data input interfaces</strong> (a personalized calendar for selecting dates; selecting data from a list with advanced search options; a randomizer that lets the user “spin a wheel” and chooses one of the available options, etc.)</li>
<li><strong>Reusable components</strong> that do not depend on a particular bot.</li>
</ul>
<h4><a class="anchor" name="inline-button-web-apps" href="webapps#inline-button-web-apps"><i class="anchor-icon"></i></a>Inline Button Web Apps</h4>
<blockquote>
<p><strong>TL;DR:</strong> For more interactive Web Apps like <a href="https://t.me/durgerkingbot">@DurgerKingBot</a>, use a <strong>web_app</strong> type <a href="api#inlinekeyboardbutton">Inline KeyboardButton</a>, which gets basic user information and can be used to send a message on behalf of the user to the chat with the bot.</p>
</blockquote>
<p>If receiving text data alone is insufficient or you need a more advanced and personalized interface, you can open a Web App using a <strong>web_app</strong> type <a href="api#inlinekeyboardbutton">Inline KeyboardButton</a>.</p>
<p>From the button, a Web App will open with the URL specified in the button. In addition to the user&#39;s <a href="webapps#color-schemes">theme settings</a>, it will receive basic user information (<code>ID</code>, <code>name</code>, <code>username</code>, <code>language_code</code>) and a unique identifier for the session, <strong>query_id</strong>, which allows messages on behalf of the user to be sent back to the bot.</p>
<p>The bot can call the Bot API method <a href="api#answerwebappquery">answerWebAppQuery</a> to send an inline message from the user back to the bot and close the Web App. After receiving the message, the bot can continue communicating with the user.</p>
<p><strong>Good for:</strong></p>
<ul>
<li>Fully-fledged web services and integrations of any kind.</li>
<li>The use cases are effectively <strong>unlimited</strong>.</li>
</ul>
<h4><a class="anchor" name="launching-web-apps-from-the-menu-button" href="webapps#launching-web-apps-from-the-menu-button"><i class="anchor-icon"></i></a>Launching Web Apps from the Menu Button</h4>
<blockquote>
<p><strong>TL;DR:</strong> Web Apps can be launched from a customized menu button. This simply offers a quicker way to access the app and is otherwise <strong>identical</strong> to <a href="webapps#inline-button-web-apps">launching a Web App from an inline button</a>.</p>
</blockquote>
<p>By default, chats with bots always show a convenient <strong>menu button</strong> that provides quick access to all listed <a href="https://core.telegram.org/bots#commands">commands</a>. With <a href="api-changelog#april-16-2022">Bot API 6.0</a>, this button can be used to <strong>launch a Web App</strong> instead.</p>
<div class="blog_video_player_wrap" style="max-width: 600px; margin: 20px auto 20px;">
 <video class="blog_video_player tl_blog_vid_autoplay" onclick="videoTogglePlay(this)" autoplay loop controls muted poster="https://core.telegram.org/file/464001829/12247/e6LoU12o4Ng.109921/1226afb8f18f8ea8c4" style="max-width: 600px;" title="" alt="Menu Button">
  <source src="https://core.telegram.org/file/464001838/10fa2/WrJmkuIMan0.1217917.mp4/e25a5f31bc4e6493f7" type="video/mp4">
 </video>
</div>

<p>To configure the menu button, you must specify the text it should show and the Web App URL. There are two ways to set these parameters:</p>
<ul>
<li>To customize the button for <strong>all users</strong>, use <a href="https://t.me/botfather">@BotFather</a> (the <code>/setmenubutton</code> command or <em>Bot Settings &gt; Menu Button</em>).</li>
<li>To customize the button for both <strong>all users</strong> and <strong>specific users</strong>, use the <a href="api#setchatmenubutton">setChatMenuButton</a> method in the Bot API. For example, change the button text according to the user&#39;s language, or show links to different Web Apps based on a user&#39;s settings in your bot.</li>
</ul>
<p>Apart from this, Web Apps opened via the menu button work in the exact same way as when <a href="webapps#inline-button-web-apps">using inline buttons</a>.</p>
<blockquote>
<p><a href="https://t.me/durgerkingbot">@DurgerKingBot</a> allows launching its Web App both from an inline button and from the menu button.</p>
</blockquote>
<h4><a class="anchor" name="launching-web-apps-from-the-attachment-menu" href="webapps#launching-web-apps-from-the-attachment-menu"><i class="anchor-icon"></i></a>Launching Web Apps from the Attachment Menu</h4>
<blockquote>
<p><strong>TL;DR:</strong> Web App Bots can request to be added directly to a user&#39;s attachment menu, allowing them to be quickly launched from any chat. To try this mode, open this <a href="https://t.me/durgerkingbot?startattach">attachment menu link</a> for <em>@DurgerKingBot</em>, then use the <img class="icon" src="https://core.telegram.org/file/464001085/2/E4hNXSNQimQ.2503/bf6ffcab3cb3afd43d" alt="Attach"> menu in <strong>any type of chat</strong>.</p>
</blockquote>
<p>Web App Bots can request to be added directly to a user&#39;s attachment menu, allowing them to be quickly launched from <strong>any type of chat</strong>. <sup><mark>NEW</mark></sup> You can configure in which types of chats your web app can be started from the attachment menu (private, groups, supergroups or channels).</p>
<p>Attachment menu integration is currently only available for major advertisers on the <a href="https://promote.telegram.org/basics">Telegram Ad Platform</a>. However, <strong>all bots</strong> can use it in the <a href="webapps#using-bots-in-the-test-environment">test server environment</a>.</p>
<p>To enable this feature for your bot, open <a href="https://t.me/botfather">@BotFather</a> <a href="webapps#using-bots-in-the-test-environment">from an account on the test server</a> and send the <code>/setattach</code> command – or go to <em>Bot Settings &gt; Configure Attachment Menu</em>. Then specify the URL that will be opened to launch the bot&#39;s Web App via its icon in the attachment menu.</p>
<p><sup><mark>NEW</mark></sup> You can add a &#39;Settings&#39; item to the context menu of your Web App using <a href="https://t.me/botfather">@BotFather</a>. When users select this option from the menu, your bot will receive a <code>settingsButtonClicked</code> event.</p>
<p>In addition to the user&#39;s <a href="webapps#color-schemes">theme settings</a>, the bot will receive basic user information (<code>ID</code>, <code>name</code>, <code>username</code>, <code>language_code</code>, <code>photo</code>), as well as public info about the chat partner (<code>ID</code>, <code>name</code>, <code>username</code>, <code>photo</code>) or the chat info (<code>ID</code>, <code>type</code>, <code>title</code>, <code>username</code>, <code>photo</code>) and a unique identifier for the web view session <strong>query_id</strong>, which allows messages of any type to be sent to the chat on behalf of the user that opened the bot.</p>
<p>The bot can call the Bot API method <a href="api#answerwebappquery">answerWebAppQuery</a>, which sends an inline message from the user via the bot to the chat where it was launched and closes the Web App.</p>
<blockquote>
<p>You can read more about adding bots to the attachment menu <a href="webapps#adding-bots-to-the-attachment-menu">here</a>.</p>
</blockquote>
<hr>
<h3><a class="anchor" name="initializing-web-apps" href="webapps#initializing-web-apps"><i class="anchor-icon"></i></a>Initializing Web Apps</h3>
<p>To connect your Web App to the Telegram client, place the script <a href="https://telegram.org/js/telegram-web-app.js">telegram-web-app.js</a> in the <code>&lt;head&gt;</code> tag before any other scripts, using this code:</p>
<pre><code>&lt;script src=&quot;https://telegram.org/js/telegram-web-app.js&quot;&gt;&lt;/script&gt;</code></pre>
<p>Once the script is connected, a <code>window.Telegram.WebApp</code> object will become available with the following fields:</p>
<table class="table">
<thead>
<tr>
<th>Field</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>initData</td>
<td>String</td>
<td>A string with raw data transferred to the Web App, convenient for <a href="webapps#validating-data-received-via-the-web-app">validating data</a>.<br><strong>WARNING:</strong> <a href="webapps#validating-data-received-via-the-web-app">Validate data</a> from this field before using it on the bot&#39;s server.</td>
</tr>
<tr>
<td>initDataUnsafe</td>
<td><a href="webapps#webappinitdata">WebAppInitData</a></td>
<td>An object with input data transferred to the Web App.<br><strong>WARNING:</strong> Data from this field should not be trusted. You should only use data from <em>initData</em> on the bot&#39;s server and only after it has been <a href="webapps#validating-data-received-via-the-web-app">validated</a>.</td>
</tr>
<tr>
<td>version <sup><mark>NEW</mark></sup></td>
<td>String</td>
<td>The version of the Bot API available in the user&#39;s Telegram app.</td>
</tr>
<tr>
<td>colorScheme</td>
<td>String</td>
<td>The color scheme currently used in the Telegram app. Either “light” or “dark”.<br>Also available as the CSS variable <code>var(--tg-color-scheme)</code>.</td>
</tr>
<tr>
<td>themeParams</td>
<td><a href="webapps#themeparams">ThemeParams</a></td>
<td>An object containing the current theme settings used in the Telegram app.</td>
</tr>
<tr>
<td>isExpanded</td>
<td>Boolean</td>
<td><em>True</em> if the Web App is expanded to the maximum available height. False, if the Web App occupies part of the screen and can be expanded to the full height using the <strong>expand()</strong> method.</td>
</tr>
<tr>
<td>viewportHeight</td>
<td>Float</td>
<td>The current height of the visible area of the Web App. Also available in CSS as the variable <code>var(--tg-viewport-height)</code>.<br><br>The application can display just the top part of the Web App, with its lower part remaining outside the screen area. From this position, the user can “pull” the Web App to its maximum height, while the bot can do the same by calling the <strong>expand()</strong> method. As the position of the Web App changes, the current height value of the visible area will be updated in real time.<br><br>Please note that the refresh rate of this value is not sufficient to smoothly follow the lower border of the window. It should not be used to pin interface elements to the bottom of the visible area. It&#39;s more appropriate to use the value of the <code>viewportStableHeight</code> field for this purpose.</td>
</tr>
<tr>
<td>viewportStableHeight</td>
<td>Float</td>
<td>The height of the visible area of the Web App in its last stable state. Also available in CSS as a variable <code>var(--tg-viewport-stable-height)</code>.<br><br>The application can display just the top part of the Web App, with its lower part remaining outside the screen area. From this position, the user can “pull” the Web App to its maximum height, while the bot can do the same by calling the <strong>expand()</strong> method. Unlike the value of <code>viewportHeight</code>, the value of <code>viewportStableHeight</code> does not change as the position of the Web App changes with user gestures or during animations. The value of <code>viewportStableHeight</code> will be updated after all gestures and animations are completed and the Web App reaches its final size.<br><br><em>Note the <a href="webapps#events-available-for-web-apps">event</a> <code>viewportChanged</code> with the passed parameter <code>isStateStable=true</code>, which will allow you to track when the stable state of the height of the visible area changes.</em></td>
</tr>
<tr>
<td>headerColor <sup><mark>NEW</mark></sup></td>
<td>String</td>
<td>Current header color in the <code>#RRGGBB</code> format.</td>
</tr>
<tr>
<td>backgroundColor <sup><mark>NEW</mark></sup></td>
<td>String</td>
<td>Current background color in the <code>#RRGGBB</code> format.</td>
</tr>
<tr>
<td>BackButton <sup><mark>NEW</mark></sup></td>
<td><a href="webapps#backbutton">BackButton</a></td>
<td>An object for controlling the back button which can be displayed in the header of the Web App in the Telegram interface.</td>
</tr>
<tr>
<td>MainButton</td>
<td><a href="webapps#mainbutton">MainButton</a></td>
<td>An object for controlling the main button, which is displayed at the bottom of the Web App in the Telegram interface.</td>
</tr>
<tr>
<td>HapticFeedback <sup><mark>NEW</mark></sup></td>
<td><a href="webapps#hapticfeedback">HapticFeedback</a></td>
<td>An object for controlling haptic feedback.</td>
</tr>
<tr>
<td>isVersionAtLeast(version) <sup><mark>NEW</mark></sup></td>
<td>Function</td>
<td>Returns true if the user&#39;s app supports a version of the Bot API that is equal to or higher than the version passed as the parameter.</td>
</tr>
<tr>
<td>setHeaderColor(color) <sup><mark>NEW</mark></sup></td>
<td>Function</td>
<td><mark>Bot API 6.1+</mark> A method that sets the app header color. You can only pass <em>Telegram.WebApp.themeParams.bg_color</em> or <em>Telegram.WebApp.themeParams.secondary_bg_color</em> as a color or you can use keywords <em>bg_color</em>, <em>secondary_bg_color</em> instead.</td>
</tr>
<tr>
<td>setBackgroundColor(color) <sup><mark>NEW</mark></sup></td>
<td>Function</td>
<td><mark>Bot API 6.1+</mark> A method that sets the app background color in the <code>#RRGGBB</code> format or you can use keywords <em>bg_color</em>, <em>secondary_bg_color</em> instead.</td>
</tr>
<tr>
<td>onEvent(eventType, eventHandler)</td>
<td>Function</td>
<td>A method that sets the app event handler. Check <a href="webapps#events-available-for-web-apps">the list of available events</a>.</td>
</tr>
<tr>
<td>offEvent(eventType, eventHandler)</td>
<td>Function</td>
<td>A method that deletes a previously set event handler.</td>
</tr>
<tr>
<td>sendData(data)</td>
<td>Function</td>
<td>A method used to send data to the bot. When this method is called, a service message is sent to the bot containing the data <em>data</em> of the length up to 4096 bytes, and the Web App is closed. See the field <em>web_app_data</em> in the class <a href="api#message">Message</a>.<br><br><em>This method is only available for Web Apps launched via a <a href="webapps#keyboard-button-web-apps">Keyboard button</a>.</em></td>
</tr>
<tr>
<td>openLink(url) <sup><mark>NEW</mark></sup></td>
<td>Function</td>
<td>A method that opens a link in an external browser. The Web App will <em>not</em> be closed.<br><br><em>Note that this method can be called only in response to the user interaction with the Web App interface (e.g. click inside the Web App or on the main button)</em></td>
</tr>
<tr>
<td>openTelegramLink(url) <sup><mark>NEW</mark></sup></td>
<td>Function</td>
<td>A method that opens a telegram link inside Telegram app. The Web App <em>will</em> be closed.</td>
</tr>
<tr>
<td>openInvoice(url[, callback]) <sup><mark>NEW</mark></sup></td>
<td>Function</td>
<td><mark>Bot API 6.1+</mark> A method that opens an invoice using the link <em>url</em>. The Web App will receive the <a href="webapps#events-available-for-web-apps">event</a> <em>invoiceClosed</em> when the invoice is closed. If an optional <em>callback</em> parameter was passed, the <em>callback</em> function will be called and the invoice status will be passed as the first argument.</td>
</tr>
<tr>
<td>ready()</td>
<td>Function</td>
<td>A method that informs the Telegram app that the Web App is ready to be displayed.<br>It is recommended to call this method as early as possible, as soon as all essential interface elements are loaded. Once this method is called, the loading placeholder is hidden and the Web App is shown.<br>If the method is not called, the placeholder will be hidden only when the page is fully loaded.</td>
</tr>
<tr>
<td>expand()</td>
<td>Function</td>
<td>A method that expands the Web App to the maximum available height. To find out if the Web App is expanded to the maximum height, refer to the value of the <em>Telegram.WebApp.isExpanded</em> parameter</td>
</tr>
<tr>
<td>close()</td>
<td>Function</td>
<td>A method that closes the Web App.</td>
</tr>
</tbody>
</table>
<h4><a class="anchor" name="themeparams" href="webapps#themeparams"><i class="anchor-icon"></i></a>ThemeParams</h4>
<p>Web Apps can <a href="webapps#color-schemes">adjust the appearance</a> of the interface to match the Telegram user&#39;s app in real time. This object contains the user&#39;s current theme settings:</p>
<table class="table">
<thead>
<tr>
<th>Field</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>bg_color</td>
<td>String</td>
<td><em>Optional</em>. Background color in the <code>#RRGGBB</code> format.<br>Also available as the CSS variable <code>var(--tg-theme-bg-color)</code>.</td>
</tr>
<tr>
<td>text_color</td>
<td>String</td>
<td><em>Optional</em>. Main text color in the <code>#RRGGBB</code> format.<br>Also available as the CSS variable <code>var(--tg-theme-text-color)</code>.</td>
</tr>
<tr>
<td>hint_color</td>
<td>String</td>
<td><em>Optional</em>. Hint text color in the <code>#RRGGBB</code> format.<br>Also available as the CSS variable <code>var(--tg-theme-hint-color)</code>.</td>
</tr>
<tr>
<td>link_color</td>
<td>String</td>
<td><em>Optional</em>. Link color in the <code>#RRGGBB</code> format.<br>Also available as the CSS variable <code>var(--tg-theme-link-color)</code>.</td>
</tr>
<tr>
<td>button_color</td>
<td>String</td>
<td><em>Optional</em>. Button color in the <code>#RRGGBB</code> format.<br>Also available as the CSS variable <code>var(--tg-theme-button-color)</code>.</td>
</tr>
<tr>
<td>button_text_color</td>
<td>String</td>
<td><em>Optional</em>. Button text color in the <code>#RRGGBB</code> format.<br>Also available as the CSS variable <code>var(--tg-theme-button-text-color)</code>.</td>
</tr>
<tr>
<td>secondary_bg_color <sup><mark>NEW</mark></sup></td>
<td>String</td>
<td><em>Optional</em>. <mark>Bot API 6.1+</mark> Secondary background color in the <code>#RRGGBB</code> format.<br>Also available as the CSS variable <code>var(--tg-theme-secondary-bg-color)</code>.</td>
</tr>
</tbody>
</table>
<div>
  <a href="https://core.telegram.org/file/464001695/11185/DAwyUjA7LNA.215601/26f4c8ebf862ae860d" target="_blank"><img src="https://core.telegram.org/file/464001695/11185/DAwyUjA7LNA.215601/26f4c8ebf862ae860d" title="WebViewColors explained"  class="dev_page_image" /></a>
</div>

<h4><a class="anchor" name="backbutton" href="webapps#backbutton"><i class="anchor-icon"></i></a>BackButton</h4>
<p><sup><mark>NEW</mark></sup> This object controls the <strong>back</strong> button, which can be displayed in the header of the Web App in the Telegram interface.</p>
<table class="table">
<thead>
<tr>
<th>Field</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>isVisible</td>
<td>Boolean</td>
<td>Shows whether the button is visible. Set to <em>false</em> by default.</td>
</tr>
<tr>
<td>onClick(callback)</td>
<td>Function</td>
<td><mark>Bot API 6.1+</mark> A method that sets the button press event handler. An alias for <code>Telegram.WebApp.onEvent(&#39;backButtonClicked&#39;, callback)</code></td>
</tr>
<tr>
<td>offClick(callback)</td>
<td>Function</td>
<td><mark>Bot API 6.1+</mark> A method that removes the button press event handler. An alias for <code>Telegram.WebApp.offEvent(&#39;backButtonClicked&#39;, callback)</code></td>
</tr>
<tr>
<td>show()</td>
<td>Function</td>
<td><mark>Bot API 6.1+</mark> A method to make the button active and visible.</td>
</tr>
<tr>
<td>hide()</td>
<td>Function</td>
<td><mark>Bot API 6.1+</mark> A method to hide the button.</td>
</tr>
</tbody>
</table>
<p>All these methods return the BackButton object so they can be chained.</p>
<h4><a class="anchor" name="mainbutton" href="webapps#mainbutton"><i class="anchor-icon"></i></a>MainButton</h4>
<p>This object controls the main button, which is displayed at the bottom of the Web App in the Telegram interface.</p>
<table class="table">
<thead>
<tr>
<th>Field</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>text</td>
<td>String</td>
<td>Current button text. Set to <em>CONTINUE</em> by default.</td>
</tr>
<tr>
<td>color</td>
<td>String</td>
<td>Current button color. Set to <em>themeParams.button_color</em> by default.</td>
</tr>
<tr>
<td>textColor</td>
<td>String</td>
<td>Current button text color. Set to <em>themeParams.button_text_color</em> by default.</td>
</tr>
<tr>
<td>isVisible</td>
<td>Boolean</td>
<td>Shows whether the button is visible. Set to <em>false</em> by default.</td>
</tr>
<tr>
<td>isActive</td>
<td>Boolean</td>
<td>Shows whether the button is active. Set to <em>true</em> by default.</td>
</tr>
<tr>
<td>isProgressVisible</td>
<td>Boolean</td>
<td><em>Readonly.</em> Shows whether the button is displaying a loading indicator.</td>
</tr>
<tr>
<td>setText(text)</td>
<td>Function</td>
<td>A method to set the button text.</td>
</tr>
<tr>
<td>onClick(callback)</td>
<td>Function</td>
<td>A method that sets the button press event handler. An alias for <code>Telegram.WebApp.onEvent(&#39;mainButtonClicked&#39;, callback)</code></td>
</tr>
<tr>
<td>offClick(callback) <sup><mark>NEW</mark></sup></td>
<td>Function</td>
<td>A method that removes the button press event handler. An alias for <code>Telegram.WebApp.offEvent(&#39;mainButtonClicked&#39;, callback)</code></td>
</tr>
<tr>
<td>show()</td>
<td>Function</td>
<td>A method to make the button visible.<br><em>Note that opening the Web App from the <a href="webapps#launching-web-apps-from-the-attachment-menu">attachment menu</a> hides the main button until the user interacts with the Web App interface.</em></td>
</tr>
<tr>
<td>hide()</td>
<td>Function</td>
<td>A method to hide the button.</td>
</tr>
<tr>
<td>enable()</td>
<td>Function</td>
<td>A method to enable the button.</td>
</tr>
<tr>
<td>disable()</td>
<td>Function</td>
<td>A method to disable the button.</td>
</tr>
<tr>
<td>showProgress(leaveActive)</td>
<td>Function</td>
<td>A method to show a loading indicator on the button.<br>It is recommended to display loading progress if the action tied to the button may take a long time. By default, the button is disabled while the action is in progress. If the parameter <code>leaveActive=true</code> is passed, the button remains enabled.</td>
</tr>
<tr>
<td>hideProgress()</td>
<td>Function</td>
<td>A method to hide the loading indicator.</td>
</tr>
<tr>
<td>setParams(params)</td>
<td>Function</td>
<td>A method to set the button parameters. The <em>params</em> parameter is an object containing one or several fields that need to be changed:<br><strong>text</strong> - button text;<br><strong>color</strong> - button color;<br><strong>text_color</strong> - button text color;<br><strong>is_active</strong> - enable the button;<br><strong>is_visible</strong> - show the button.</td>
</tr>
</tbody>
</table>
<p>All these methods return the MainButton object so they can be chained.</p>
<h4><a class="anchor" name="hapticfeedback" href="webapps#hapticfeedback"><i class="anchor-icon"></i></a>HapticFeedback</h4>
<p><sup><mark>NEW</mark></sup> This object controls haptic feedback.</p>
<table class="table">
<thead>
<tr>
<th>Field</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>impactOccurred(style)</td>
<td>Function</td>
<td><mark>Bot API 6.1+</mark> A method tells that an impact occurred. The Telegram app may play the appropriate haptics based on style value passed. Style can be one of these values:<br>- <em>light</em>, indicates a collision between small or lightweight UI objects,<br>- <em>medium</em>, indicates a collision between medium-sized or medium-weight UI objects,<br>- <em>heavy</em>, indicates a collision between large or heavyweight UI objects,<br>- <em>rigid</em>, indicates a collision between hard or inflexible UI objects,<br>- <em>soft</em>, indicates a collision between soft or flexible UI objects.</td>
</tr>
<tr>
<td>notificationOccurred(type)</td>
<td>Function</td>
<td><mark>Bot API 6.1+</mark> A method tells that a task or action has succeeded, failed, or produced a warning. The Telegram app may play the appropriate haptics based on type value passed. Type can be one of these values:<br>- <em>error</em>, indicates that a task or action has failed,<br>- <em>success</em>, indicates that a task or action has completed successfully,<br>- <em>warning</em>, indicates that a task or action produced a warning.</td>
</tr>
<tr>
<td>selectionChanged()</td>
<td>Function</td>
<td><mark>Bot API 6.1+</mark> A method tells that the user has changed a selection. The Telegram app may play the appropriate haptics.<br><br><em>Do not use this feedback when the user makes or confirms a selection; use it only when the selection changes.</em></td>
</tr>
</tbody>
</table>
<p>All these methods return the HapticFeedback object so they can be chained.</p>
<h4><a class="anchor" name="webappinitdata" href="webapps#webappinitdata"><i class="anchor-icon"></i></a>WebAppInitData</h4>
<p>This object contains data that is transferred to the Web App when it is opened. It is empty if the Web App was launched from a <a href="webapps#keyboard-button-web-apps">keyboard button</a>.</p>
<table class="table">
<thead>
<tr>
<th>Field</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>query_id</td>
<td>String</td>
<td><em>Optional.</em> A unique identifier for the Web App session, required for sending messages via the <a href="api#answerwebappquery">answerWebAppQuery</a> method.</td>
</tr>
<tr>
<td>user</td>
<td><a href="webapps#webappuser">WebAppUser</a></td>
<td><em>Optional.</em> An object containing data about the current user.</td>
</tr>
<tr>
<td>receiver</td>
<td><a href="webapps#webappuser">WebAppUser</a></td>
<td><em>Optional.</em> An object containing data about the chat partner of the current user in the chat where the bot was launched via the attachment menu. Returned only for private chats and only for Web Apps launched via the attachment menu.</td>
</tr>
<tr>
<td>chat <sup><mark>NEW</mark></sup></td>
<td><a href="webapps#webappchat">WebAppChat</a></td>
<td><em>Optional.</em> An object containing data about the chat where the bot was launched via the attachment menu. Returned for supergroups, channels and group chats – only for Web Apps launched via the attachment menu.</td>
</tr>
<tr>
<td>start_param</td>
<td>String</td>
<td><em>Optional.</em> The value of the <em>startattach</em> parameter, passed <a href="webapps#adding-bots-to-the-attachment-menu">via link</a>. Only returned for Web Apps when launched from the attachment menu via link.<br><br>The value of the <code>start_param</code> parameter will also be passed in the GET-parameter <code>tgWebAppStartParam</code>, so the Web App can load the correct interface right away.</td>
</tr>
<tr>
<td>can_send_after <sup><mark>NEW</mark></sup></td>
<td>Integer</td>
<td><em>Optional.</em> Time in seconds, after which a message can be sent via the <a href="api#answerwebappquery">answerWebAppQuery</a> method.</td>
</tr>
<tr>
<td>auth_date</td>
<td>Integer</td>
<td>Unix time when the form was opened.</td>
</tr>
<tr>
<td>hash</td>
<td>String</td>
<td>A hash of all passed parameters, which the bot server can use to <a href="webapps#validating-data-received-via-the-web-app">check their validity</a>.</td>
</tr>
</tbody>
</table>
<h4><a class="anchor" name="webappuser" href="webapps#webappuser"><i class="anchor-icon"></i></a>WebAppUser</h4>
<p>This object contains the data of the Web App user.</p>
<table class="table">
<thead>
<tr>
<th>Field</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>id</td>
<td>Integer</td>
<td>A unique identifier for the user or bot. This number may have more than 32 significant bits and some programming languages may have difficulty/silent defects in interpreting it. It has at most 52 significant bits, so a 64-bit integer or a double-precision float type is safe for storing this identifier.</td>
</tr>
<tr>
<td>is_bot</td>
<td>Boolean</td>
<td><em>Optional</em>. <em>True</em>, if this user is a bot. Returns in the <a href="webapps#webappinitdata">receiver</a> field only.</td>
</tr>
<tr>
<td>first_name</td>
<td>String</td>
<td>First name of the user or bot.</td>
</tr>
<tr>
<td>last_name</td>
<td>String</td>
<td><em>Optional</em>. Last name of the user or bot.</td>
</tr>
<tr>
<td>username</td>
<td>String</td>
<td><em>Optional</em>. Username of the user or bot.</td>
</tr>
<tr>
<td>language_code</td>
<td>String</td>
<td><em>Optional</em>. <a href="https://en.wikipedia.org/wiki/IETF_language_tag">IETF language tag</a> of the user&#39;s language. Returns in <em>user</em> field only.</td>
</tr>
<tr>
<td>photo_url</td>
<td>String</td>
<td><em>Optional</em>. URL of the user’s profile photo. The photo can be in .jpeg or .svg formats. Only returned for Web Apps launched from the attachment menu.</td>
</tr>
</tbody>
</table>
<h4><a class="anchor" name="webappchat" href="webapps#webappchat"><i class="anchor-icon"></i></a>WebAppChat</h4>
<p><sup><mark>NEW</mark></sup> This object represents a chat.</p>
<table class="table">
<thead>
<tr>
<th>Field</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>id</td>
<td>Integer</td>
<td>Unique identifier for this chat. This number may have more than 32 significant bits and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a signed 64-bit integer or double-precision float type are safe for storing this identifier.</td>
</tr>
<tr>
<td>type</td>
<td>String</td>
<td>Type of chat, can be either “group”, “supergroup” or “channel”</td>
</tr>
<tr>
<td>title</td>
<td>String</td>
<td>Title of the chat</td>
</tr>
<tr>
<td>username</td>
<td>String</td>
<td><em>Optional</em>. Username of the chat</td>
</tr>
<tr>
<td>photo_url</td>
<td>String</td>
<td><em>Optional</em>. URL of the chat’s photo. The photo can be in .jpeg or .svg formats. Only returned for Web Apps launched from the attachment menu.</td>
</tr>
</tbody>
</table>
<h4><a class="anchor" name="validating-data-received-via-the-web-app" href="webapps#validating-data-received-via-the-web-app"><i class="anchor-icon"></i></a>Validating data received via the Web App</h4>
<p>To validate data received via the Web App, one should send the data from the <em>Telegram.WebApp.initData</em> field to the bot&#39;s backend. The data is a query string, which is composed of a series of field-value pairs.</p>
<p>You can verify the integrity of the data received by comparing the received <em>hash</em> parameter with the hexadecimal representation of the <a href="https://en.wikipedia.org/wiki/Hash-based_message_authentication_code">HMAC-SHA-256</a> signature of the <strong>data-check-string</strong> with the secret key, which is the <a href="https://en.wikipedia.org/wiki/Hash-based_message_authentication_code">HMAC-SHA-256</a> signature of the <a href="https://core.telegram.org/bots#creating-a-new-bot">bot&#39;s token</a> with the constant string <code>WebAppData</code> used as a key.</p>
<p><strong>Data-check-string</strong> is a chain of all received fields, sorted alphabetically, in the format <code>key=&lt;value&gt;</code> with a <a href="https://en.wikipedia.org/wiki/Newline">line feed</a> character (&#39;\n&#39;, 0x0A) used as separator – e.g., <code>&#39;auth_date=&lt;auth_date&gt;\nquery_id=&lt;query_id&gt;\nuser=&lt;user&gt;&#39;</code>.</p>
<p>The full check might look like:</p>
<pre><code>data_check_string = ...
secret_key = HMAC_SHA256(&lt;bot_token&gt;, &quot;WebAppData&quot;)
if (hex(HMAC_SHA256(data_check_string, secret_key)) == hash) {
  // data is from Telegram
}</code></pre>
<p>To prevent the use of outdated data, you can additionally check the <em>auth_date</em> field, which contains a Unix timestamp of when it was received by the Web App.</p>
<p>Once validated, the data may be used on your server. Complex data types are represented as JSON-serialized objects.</p>
<h4><a class="anchor" name="events-available-for-web-apps" href="webapps#events-available-for-web-apps"><i class="anchor-icon"></i></a>Events Available for Web Apps</h4>
<p>The Web App can receive events from the Telegram app, onto which a handler can be attached using the <code>Telegram.WebApp.onEvent(eventType, eventHandler)</code> method. Inside <code>eventHandler</code> the <em>this</em> object refers to <em>Telegram.WebApp</em>, the set of parameters sent to the handler depends on the event type. Below is a list of possible events:</p>
<table class="table">
<thead>
<tr>
<th>eventType</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>themeChanged</code></td>
<td>Occurs whenever theme settings are changed in the user&#39;s Telegram app (including switching to night mode).<br><em>eventHandler</em> receives no parameters, new theme settings and color scheme can be received via <em>this.themeParams</em> and <em>this.colorScheme</em> respectively.</td>
</tr>
<tr>
<td><code>viewportChanged</code></td>
<td>Occurs when the visible section of the Web App is changed.<br><em>eventHandler</em> receives an object with the single field <em>isStateStable</em>. If <em>isStateStable</em> is true, the resizing of the Web App is finished. If it is false, the resizing is ongoing (the user is expanding or collapsing the Web App or an animated object is playing). The current value of the visible section’s height is available in <em>this.viewportHeight</em>.</td>
</tr>
<tr>
<td><code>mainButtonClicked</code></td>
<td>Occurs when the <a href="webapps#mainbutton">main button</a> is pressed.<br><em>eventHandler</em> receives no parameters.</td>
</tr>
<tr>
<td><code>backButtonClicked</code> <sup><mark>NEW</mark></sup></td>
<td><mark>Bot API 6.1+</mark> Occurrs when the <a href="webapps#backbutton">back button</a> is pressed.<br><em>eventHandler</em> receives no parameters.</td>
</tr>
<tr>
<td><code>settingsButtonClicked</code> <sup><mark>NEW</mark></sup></td>
<td><mark>Bot API 6.1+</mark> Occurrs when the Settings item in context menu is pressed.<br><em>eventHandler</em> receives no parameters.</td>
</tr>
<tr>
<td><code>invoiceClosed</code> <sup><mark>NEW</mark></sup></td>
<td><mark>Bot API 6.1+</mark> Occurrs when the opened invoice is closed.<br><em>eventHandler</em> receives an object with the two fields: <em>url</em> – invoice link provided and <em>status</em> – one of the invoice statuses:<br>- <strong>paid</strong> – invoice was paid successfully,<br>- <strong>cancelled</strong> – user closed this invoice without paying,<br>- <strong>failed</strong> – user tried to pay, but the payment was failed,<br>- <strong>pending</strong> – the payment is still processing. The bot will receive a service message about a <a href="api#successfulpayment">successful payment</a> when the payment is successfully paid.</td>
</tr>
</tbody>
</table>
<h4><a class="anchor" name="adding-bots-to-the-attachment-menu" href="webapps#adding-bots-to-the-attachment-menu"><i class="anchor-icon"></i></a>Adding Bots to the Attachment Menu</h4>
<p>Attachment menu integration is currently only available for major advertisers on the <a href="https://promote.telegram.org/basics">Telegram Ad Platform</a>. However, <strong>all bots</strong> can use it in the <a href="webapps#using-bots-in-the-test-environment">test server environment</a>. Talk to Botfather on the test server to <a href="webapps#using-bots-in-the-test-environment">set up the integration</a>.</p>
<p>A special link is used to add bots to the attachment menu:</p>
<p><code>https://t.me/botusername?startattach</code><br>or<br><code>https://t.me/botusername?startattach=command</code></p>
<blockquote>
<p>For example, open this <a href="https://t.me/durgerkingbot?startattach">attachment menu link</a> for <em>@DurgerKingBot</em>, then use the <img class="icon" src="https://core.telegram.org/file/464001085/2/E4hNXSNQimQ.2503/bf6ffcab3cb3afd43d" alt="Attach"> menu in any <strong>private chat</strong>.</p>
</blockquote>
<p>Opening the link prompts the user to add the bot to their attachment menu. If the bot has already been added, the attachment menu will open in the current chat and redirect to the bot there (if the link is opened from a 1-on-1 chat). If a non-empty <em>startattach</em> parameter was included in the link, it will be passed to the Web App in the <em>start_param</em> field and in the GET parameter <em>tgWebAppStartParam</em>.</p>
<p>The following link formats are also supported:</p>
<p><code>https://t.me/username?attach=botusername</code><br><code>https://t.me/username?attach=botusername&amp;startattach=command</code><br><code>https://t.me/+1234567890?attach=botusername</code><br><code>https://t.me/+1234567890?attach=botusername&amp;startattach=command</code></p>
<p>These links open the Web App in the attachment menu in the chat with a specific user. If the bot wasn&#39;t already added to the attachment menu, the user will be prompted to do so. If a non-empty <em>startattach</em> parameter was included in the link, it will be passed to the Web App in the <em>start_param</em> field and in the GET parameter <em>tgWebAppStartParam</em>.</p>
<p><mark>Bot API 6.1+</mark> supports a new link format:</p>
<p><code>https://t.me/botusername?startattach&amp;choose=users+bots</code><br><code>https://t.me/botusername?startattach=command&amp;choose=groups+channels</code></p>
<p>Opening such a link prompts the user to choose a specific chat and opens the attachment menu in that chat. If the bot wasn&#39;t already added to the attachment menu, the user will be prompted to do so. You can specify which types of chats the user will be able to choose  from. It can be one or more of the following types: <em>users</em>, <em>bots</em>, <em>groups</em>, <em>channels</em> separated by a <code>+</code> sign. If a non-empty <em>startattach</em> parameter was included in the link, it will be passed to the Web App in the <em>start_param</em> field and in the GET parameter <em>tgWebAppStartParam</em>.</p>
<h3><a class="anchor" name="testing-web-apps" href="webapps#testing-web-apps"><i class="anchor-icon"></i></a>Testing Web Apps</h3>
<h4><a class="anchor" name="using-bots-in-the-test-environment" href="webapps#using-bots-in-the-test-environment"><i class="anchor-icon"></i></a>Using bots in the test environment</h4>
<p>To log in to the test environment, use either of the following:</p>
<ul>
<li><strong>iOS:</strong> tap 10 times on the Settings icon &gt; Accounts &gt; Login to another account &gt; Test.</li>
<li><strong>Telegram Desktop:</strong> open ☰ Settings &gt; Shift + Alt + Right click ‘Add Account’ and select ‘Test Server’.</li>
<li><strong>macOS:</strong> click the Settings icon 10 times to open the Debug Menu, ⌘ + click ‘Add Account’ and log in via phone number.</li>
</ul>
<p>The test environment is completely separate from the main environment, so you will need to create a <strong>new user account</strong> and a <strong>new bot</strong> with @BotFather.</p>
<p>After receiving your bot token, you can send requests to the Bot API in this format: </p>
<pre><code>https://api.telegram.org/bot&lt;token&gt;/test/METHOD_NAME</code></pre>
<blockquote>
<p><strong>Note:</strong> When working with the test environment, you may use HTTP links without TLS to test your Web App.</p>
</blockquote>
<h4><a class="anchor" name="debug-mode-for-web-apps" href="webapps#debug-mode-for-web-apps"><i class="anchor-icon"></i></a>Debug Mode for Web Apps</h4>
<p>Use these tools to find app-specific issues in your Web App:</p>
<p><strong>Android</strong></p>
<ul>
<li><a href="https://developer.chrome.com/docs/devtools/remote-debugging/">Enable USB-Debugging</a> on your device.</li>
<li>In Telegram Settings, scroll all the way down, press and hold on the <strong>version number</strong> two times.</li>
<li>Choose <em>Enable WebView Debug</em> in the Debug Settings.</li>
<li>Connect your phone to your computer and open <code>chrome://inspect/#devices</code> in Chrome – you will see your Web App there when you launch it on your phone.</li>
</ul>
<p><strong>Telegram Desktop on Windows and Linux</strong></p>
<ul>
<li>Download and launch the <a href="https://desktop.telegram.org/changelog#beta-version">Beta Version</a> of Telegram Desktop on <strong>Windows</strong> or <strong>Linux</strong> (not supported on Telegram Desktop for macOS yet).</li>
<li>Go to <em>Settings &gt; Advanced &gt; Experimental settings &gt; Enable webview inspection</em>.</li>
<li>Right click in the WebView and choose <em>Inspect</em>.</li>
</ul>
<p><strong>Telegram macOS</strong></p>
<ul>
<li>Download and launch the <a href="https://telegram.org/dl/macos/beta">Beta Version</a> of Telegram macOS.</li>
<li>Quickly click 5 times on the Settings icon to open the debug menu and enable “Debug Web Apps”.</li>
<li>Right click in the web app and choose <em>Inspect Element</em>.</li>
</ul>
</div>
  
</div>
          
        </div>
      </div>
      <div class="footer_wrap">
  <div class="footer_columns_wrap footer_desktop">
    <div class="footer_column footer_column_telegram">
      <h5>Telegram</h5>
      <div class="footer_telegram_description"></div>
      Telegram is a cloud-based mobile and desktop messaging app with a focus on security and speed.
    </div>

    <div class="footer_column">
      <h5><a href="https://telegram.org/faq">About</a></h5>
      <ul>
        <li><a href="https://telegram.org/faq">FAQ</a></li>
        <li><a href="https://telegram.org/blog">Blog</a></li>
        <li><a href="https://telegram.org/jobs">Jobs</a></li>
      </ul>
    </div>
    <div class="footer_column">
      <h5><a href="https://telegram.org/apps#mobile-apps">Mobile Apps</a></h5>
      <ul>
        <li><a href="https://telegram.org/dl/ios">iPhone/iPad</a></li>
        <li><a href="https://telegram.org/dl/android">Android</a></li>
        <li><a href="https://telegram.org/dl/wp">Windows Phone</a></li>
      </ul>
    </div>
    <div class="footer_column">
      <h5><a href="https://telegram.org/apps#desktop-apps">Desktop Apps</a></h5>
      <ul>
        <li><a href="https://desktop.telegram.org/">PC/Mac/Linux</a></li>
        <li><a href="https://macos.telegram.org/">macOS</a></li>
        <li><a href="https://telegram.org/dl/web">Web-browser</a></li>
      </ul>
    </div>
    <div class="footer_column footer_column_platform">
      <h5><a href="https://core.telegram.org/">Platform</a></h5>
      <ul>
        <li><a href="https://core.telegram.org/api">API</a></li>
        <li><a href="https://translations.telegram.org/">Translations</a></li>
        <li><a href="https://instantview.telegram.org/">Instant View</a></li>
      </ul>
    </div>
  </div>
  <div class="footer_columns_wrap footer_mobile">
    <div class="footer_column">
      <h5><a href="https://telegram.org/faq">About</a></h5>
    </div>
    <div class="footer_column">
      <h5><a href="https://telegram.org/blog">Blog</a></h5>
    </div>
    <div class="footer_column">
      <h5><a href="https://telegram.org/apps">Apps</a></h5>
    </div>
    <div class="footer_column">
      <h5><a href="https://core.telegram.org/">Platform</a></h5>
    </div>
    <div class="footer_column">
      <h5><a href="https://twitter.com/telegram" target="_blank" data-track="Follow/Twitter" onclick="trackDlClick(this, event)">Twitter</a></h5>
    </div>
  </div>
</div>
    </div>
    <script src="https://core.telegram.org/js/main.js?46"></script>
    <script src="https://core.telegram.org/js/jquery.min.js?1"></script>
<script src="https://core.telegram.org/js/bootstrap.min.js?1"></script>

    <script>window.initDevPageNav&&initDevPageNav();
backToTopInit("Go up");
removePreloadInit();
</script>
  </body>
</html>

